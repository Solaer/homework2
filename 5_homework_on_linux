1. Пусть в таблице users поля created_at и updated_at оказались незаполненными. Заполните их текущими датой и временем.
CREATE DATABASE vk3;
USE vk3;
CREATE TABLE users (
  id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
	first_name VARCHAR(100) NOT NULL,
	last_name VARCHAR(100) NOT NULL,
	email VARCHAR(150) NOT NULL,
	phone VARCHAR(50) NOT NULL,
	created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
	updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

/*Выходим из MySQL и создаем на сайте Базу данных все кроме created_at и updated_at у них ставлю значение NULL*\

UPDATE users SET:
  created_at = NOW(),
  updated_at = NOW();
  
2. Таблица users была неудачно спроектирована. Записи created_at и updated_at были заданы типом VARCHAR и в них долгое время помещались значения в формате 20.10.2017 8:10. Необходимо преобразовать поля к типу DATETIME, сохранив введённые ранее значения.
CREATE TABLE users (
  id SERIAL PRIMARY KEY,
  name VARCHAR(255),
  birthday_at DATE,
  created_at VARCHAR(255),
  updated_at VARCHAR(255)
);
UPDATE
  users
SET
  created_at = STR_TO_DATE(created_at, '%d.%m.%Y %k:%i'),
  updated_at = STR_TO_DATE(updated_at, '%d.%m.%Y %k:%i');

ALTER TABLE
  users
CHANGE
  created_at created_at DATETIME DEFAULT CURRENT_TIMESTAMP;

ALTER TABLE
  users
CHANGE
  updated_at updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP;

3.В таблице складских запасов storehouses_products в поле value могут встречаться самые разные цифры: 0, если товар закончился и выше нуля, если на складе имеются запасы. Необходимо отсортировать записи таким образом, чтобы они выводились в порядке увеличения значения value. Однако, нулевые запасы должны выводиться в конце, после всех записей.
CREATE TABLE storehouses_products (
    ->   id SERIAL PRIMARY KEY,
    ->   storehouse_id INT UNSIGNED,
    ->   product_id INT UNSIGNED,
    ->   value INT UNSIGNED COMMENT
    -> );
INSERT INTO
    ->   storehouses_products (storehouse_id, product_id, value)
    -> VALUES
    -> (1, 647, 0),
    -> (1, 432, 2500),
    -> (1, 4783, 0),
    -> (1, 5000, 30),
    -> (1, 783, 500),
    -> (1, 321, 1);
SELECT * FROM storehouses_products ORDER BY IF(value > 0, 0, 1), value;
+----+---------------+------------+-------+
| id | storehouse_id | product_id | value |
+----+---------------+------------+-------+
|  6 |             1 |        321 |     1 |
|  4 |             1 |       5000 |    30 |
|  5 |             1 |        783 |   500 |
|  2 |             1 |        432 |  2500 |
|  1 |             1 |        647 |     0 |
|  3 |             1 |       4783 |     0 |
+----+---------------+------------+-------+

4. (по желанию) Из таблицы users необходимо извлечь пользователей, родившихся в августе и мае. Месяцы заданы в виде списка английских названий ('may', 'august')
SELECT first_name     FROM users   WHERE DATE_FORMAT(created_at, '%M') IN ('may', 'august');
+------------+
| first_name |
+------------+
| Shane      |
| Casimer    |
| Susan      |
| Santino    |
| Neal       |
| Sherwood   |
| Jamey      |
| Howell     |
| Malika     |
| Ada        |
| Gage       |
| Mariane    |
| Minnie     |
| Russell    |
+------------+
1. Подсчитайте средний возраст пользователей в таблице users
SELECT AVG(birthday) AS Average_years FROM users;
+---------------+
| Average_years |
+---------------+
|       42.3900 |
+---------------+
2. Подсчитайте количество дней рождения, которые приходятся на каждый из дней недели. Следует учесть, что необходимы дни недели текущего года, а не года рождения
SELECT   DATE_FORMAT(DATE(CONCAT_WS('-', YEAR(NOW()), MONTH(created_at), DAY(created_at))), '%W') AS day,COUNT(*) AS total
    -> FROM
    ->   users
    -> GROUP BY
    ->   day
    -> ORDER BY
    ->   total DESC;
+-----------+-------+
| day       | total |
+-----------+-------+
| Wednesday |    17 |
| Tuesday   |    16 |
| Monday    |    15 |
| Sunday    |    15 |
| Friday    |    14 |
| Thursday  |    12 |
| Saturday  |    11 |
+-----------+-------+
7 rows in set (0.00 sec)

